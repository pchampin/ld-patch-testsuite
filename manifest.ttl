@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mf: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix : <#> .

<>  rdf:type mf:Manifest ;
    rdfs:comment "LD-Patch tests" ;
    mf:include ( <turtle/manifest-ldpatch.ttl> ) ;
    mf:entries
    (
        # positive syntax tests
        <#empty>
        <#var-subject>
        <#var-object>
        <#var-unicode>
        <#var-unicode>
        <#path-forward>
        <#path-backward>
        <#path-at>
        <#path-unicity>
        <#path-filter>
        <#path-filter-equal>
        <#path-mixed>
        <#prefix-simple>
        <#prefix-empty>
        <#bind-abbr>
        <#add-1triple>
        <#add-abbr-1triple>
        <#delete-1triple>
        <#delete-abbr-1triple>
        ## TODO more...

        # negative syntax tests
        <#var-predicate>
        <#slice-bad1>
        <#add-empty>
        <#delete-empty>
        ## TODO more...

        # positive evaluation tests
        ## TODO atomic tests...
        <#spec_examples-1-2-3>
        <#spec_examples-4-5-6>
        <#spec_examples-4-7-8>
        <#spec_examples-4-9-10s>
        <#spec_examples-4-11-12>
        <#spec_examples-4-13-14>
        <#spec_examples-4-15-16>
        <#spec_examples-4-17-18>
        <#spec_example24_positive>
        <#prefix_override>

        # negative evaluation tests
        <#spec_example24_negative>
        <#ambiguous_path>
        ## TODO more examples?
    ) ;
    .


<#empty> rdf:type :PositiveSyntaxTest ;
   mf:name      "empty" ;
   rdfs:comment "An empty patch is valid" ;
   mf:action <empty.ldpatch> ;
   .

<#var-subject> rdf:type :PositiveSyntaxTest ;
   mf:name      "var-subject" ;
   rdfs:comment "A variable in subject position" ;
   mf:action <var-subject.ldpatch> ;
   .

<#var-object> rdf:type :PositiveSyntaxTest ;
   mf:name      "var-object" ;
   rdfs:comment "A variable in object position" ;
   mf:action <var-object.ldpatch> ;
   .

<#var-unicode> rdf:type :PositiveSyntaxTest ;
   mf:name      "var-unicode" ;
   rdfs:comment "Variable name using a lot of unicode characters" ;
   mf:action <var-unicode.ldpatch> ;
   .

<#path-forward> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-forward" ;
   rdfs:comment "Path containing a StepForward" ;
   mf:action <path-forward.ldpatch> ;
   .

<#path-backward> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-backward" ;
   rdfs:comment "Path containing a StepBackward" ;
   mf:action <path-backward.ldpatch> ;
   .

<#path-at> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-at" ;
   rdfs:comment "Path containing a StepAt" ;
   mf:action <path-at.ldpatch> ;
   .

<#path-unicity> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-unicity" ;
   rdfs:comment "Path containing a unicity constraint" ;
   mf:action <path-unicity.ldpatch> ;
   .

<#path-filter> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-filter" ;
   rdfs:comment "Path containing a filter" ;
   mf:action <path-filter.ldpatch> ;
   .

<#path-filter-equal> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-filter-equal" ;
   rdfs:comment "Path containing a filter with an equal sign" ;
   mf:action <path-filter-equal.ldpatch> ;
   .

<#path-mixed> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-mixed" ;
   rdfs:comment "Complex path expression mixing many elements" ;
   mf:action <path-mixed.ldpatch> ;
   .

<#prefix-simple> rdf:type :PositiveSyntaxTest ;
   mf:name      "prefix-simple" ;
   rdfs:comment "Simple prefix declaration" ;
   mf:action <prefix-simple.ldpatch> ;
   .

<#prefix-empty> rdf:type :PositiveSyntaxTest ;
   mf:name      "Empty prefix declaration" ;
   rdfs:comment "prefix-empty" ;
   mf:action <prefix-empty.ldpatch> ;
   .

<#bind-abbr> rdf:type :PositiveSyntaxTest ;
   mf:name      "bind-abbr" ;
   rdfs:comment "Abbreviated Bind statement" ;
   mf:action <bind-abbr.ldpatch> ;
   .

<#add-1triple> rdf:type :PositiveSyntaxTest ;
   mf:name      "add-1triple" ;
   rdfs:comment "Add statement with a single triple" ;
   mf:action <add-1triple.ldpatch> ;
   .

<#add-abbr-1triple> rdf:type :PositiveSyntaxTest ;
   mf:name      "add-abbr-1triple" ;
   rdfs:comment "Abbreviated Add statement with a single triple" ;
   mf:action <add-abbr-1triple.ldpatch> ;
   .

<#delete-1triple> rdf:type :PositiveSyntaxTest ;
   mf:name      "delete-1triple" ;
   rdfs:comment "Delete statement with a single triple" ;
   mf:action <delete-1triple.ldpatch> ;
   .

<#delete-abbr-1triple> rdf:type :PositiveSyntaxTest ;
   mf:name      "delete-1triple" ;
   rdfs:comment "Abbreviated Delete statement with a single triple" ;
   mf:action <delete-abbr-1triple.ldpatch> ;
   .

<#var-predicate> rdf:type :NegativeSyntaxTest ;
   mf:name      "var-predicate" ;
   rdfs:comment "A variable in predicate position" ;
   mf:action <var-predicate.ldpatch> ;
   .

<#slice-bad1> rdf:type :NegativeSyntaxTest ;
   mf:name      "slice-bad1" ;
   rdfs:comment "A slice with indices in the wrong order" ;
   mf:action <slice-bad1.ldpatch> ;
   .

<#add-empty> rdf:type :NegativeSyntaxTest ;
   mf:name      "add-empty" ;
   rdfs:comment "Can not add an empty graph" ;
   mf:action <add-empty.ldpatch> ;
   .

<#delete-empty> rdf:type :NegativeSyntaxTest ;
   mf:name      "delete-empty" ;
   rdfs:comment "Can not delete an empty graph" ;
   mf:action <delete-empty.ldpatch> ;
   .

<#spec_examples-1-2-3> rdf:type :PositiveEvaluationTest ;
   mf:name      "spec_examples-1-2-3" ;
   rdfs:comment "Examples #1 to #3 from the LD-Patch specification" ;
   mf:action    [
        :data  <spec_example1.ttl> ;
        :patch <spec_example2.ldpatch> ;
        :base  <http://example.com/timbl> ;
        ] ;
   mf:result    <spec_example3.ttl> ;
   .

<#spec_examples-4-5-6> rdf:type :PositiveEvaluationTest ;
   mf:name      "spec_examples-4-5-6" ;
   rdfs:comment "Examples #4 to #6 from the LD-Patch specification" ;
   mf:action    [
        :data  <spec_example4.ttl> ;
        :patch <spec_example5.ldpatch> ;
        :base  <http://example.com/timbl> ;
        ] ;
   mf:result    <spec_example6.ttl> ;
   .

<#spec_examples-4-7-8> rdf:type :PositiveEvaluationTest ;
   mf:name      "spec_examples-4-7-8" ;
   rdfs:comment "Examples #4, #7 and #8 from the LD-Patch specification" ;
   mf:action    [
        :data  <spec_example4.ttl> ;
        :patch <spec_example7.ldpatch> ;
        :base  <http://example.com/timbl> ;
        ] ;
   mf:result    <spec_example8.ttl> ;
   .

<#spec_examples-4-9-10> rdf:type :PositiveEvaluationTest ;
   mf:name      "spec_examples-4-9-10" ;
   rdfs:comment "Examples #4, #9 and #10 from the LD-Patch specification" ;
   mf:action    [
        :data  <spec_example4.ttl> ;
        :patch <spec_example9.ldpatch> ;
        :base  <http://example.com/timbl> ;
        ] ;
   mf:result    <spec_example10.ttl> ;
   .

<#spec_examples-4-11-12> rdf:type :PositiveEvaluationTest ;
   mf:name      "spec_examples-4-11-12" ;
   rdfs:comment "Examples #4, #11 and #12 from the LD-Patch specification" ;
   mf:action    [
        :data  <spec_example4.ttl> ;
        :patch <spec_example11.ldpatch> ;
        :base  <http://example.com/timbl> ;
        ] ;
   mf:result    <spec_example12.ttl> ;
   .

<#spec_examples-4-13-14> rdf:type :PositiveEvaluationTest ;
   mf:name      "spec_examples-4-13-14" ;
   rdfs:comment "Examples #4, #13 and #14 from the LD-Patch specification" ;
   mf:action    [
        :data  <spec_example4.ttl> ;
        :patch <spec_example13.ldpatch> ;
        :base  <http://example.com/timbl> ;
        ] ;
   mf:result    <spec_example14.ttl> ;
   .

<#spec_examples-4-15-16> rdf:type :PositiveEvaluationTest ;
   mf:name      "spec_examples-4-15-16" ;
   rdfs:comment "Examples #4, #15 and #16 from the LD-Patch specification" ;
   mf:action    [
        :data  <spec_example4.ttl> ;
        :patch <spec_example15.ldpatch> ;
        :base  <http://example.com/timbl> ;
        ] ;
   mf:result    <spec_example16.ttl> ;
   .

<#spec_examples-4-17-18> rdf:type :PositiveEvaluationTest ;
   mf:name      "spec_examples-4-17-18" ;
   rdfs:comment "Examples #4, #17 and #18 from the LD-Patch specification" ;
   mf:action    [
        :data  <spec_example4.ttl> ;
        :patch <spec_example17.ldpatch> ;
        :base  <http://example.com/timbl> ;
        ] ;
   mf:result    <spec_example18.ttl> ;
   .

<#spec_example24_positive> rdf:type :PositiveEvaluationTest ;
   mf:name      "spec_example24_positive" ;
   rdfs:comment "Successful binding of unambiguous bnodes in a pathological graph." ;
   mf:action    [
        :data  <spec_example24.ttl> ;
        :patch <spec_example24_positive.ldpatch> ;
        :base  <http://example.com/pathological> ;
        ] ;
   mf:result    <spec_example24_patched.ttl> ;
   .

<#prefix_override> rdf:type :PositiveEvaluationTest ;
   mf:name      "prefix_override" ;
   rdfs:comment "Subsequent prefix" ;
   mf:action    [
        :data  <empty.ttl> ;
        :patch <prefix_override.ldpatch> ;
        ] ;
   mf:result    <prefix_override.ttl> ;
   .

<#ambiguous_path> rdf:type :NegativeEvaluationTest ;
   mf:name      "ambiguous_path" ;
   rdfs:comment "Ambigious path applied to Example #1 from the LD-Patch specification" ;
   mf:action    [
        :data  <spec_example1.ttl> ;
        :patch <ambiguous_path.ldpatch> ;
        ] ;
   :statusCode 422 ;
   .

<#spec_example24_negative> rdf:type :NegativeEvaluationTest ;
   mf:name      "spec_example24_negative" ;
   rdfs:comment "Unsuccessful binding in a pathological graph." ;
   mf:action    [
        :data  <spec_example24.ttl> ;
        :patch <spec_example24_negative.ldpatch> ;
        ] ;
   :statusCode 422 ;
   .



#### Specific test vocabulary ####

:PositiveSyntaxTest rdf:type rdfs:Class ;
      rdfs:label "Positive Syntax Test" ;
      rdfs:comment "A type of test specifically for syntax testing. Syntax tests are not required to have an associated result, only an action (an LD-Patch file)." .

:NegativeSyntaxTest rdf:type rdfs:Class ;
      rdfs:label "Negative Syntax Test" ;
      rdfs:comment "A type of test specifically for syntax testing. Syntax tests are not required to have an associated result, only an action (an LD-Patch file). Negative syntax tests are tests of which the result should be a parser error." .

:PositiveEvaluationTest rdf:type rdfs:Class ;
      rdfs:label "Positive Evaluation Test" ;
      rdfs:comment "A type of test specifically for patch evaluation testing. Positive evaluation tests are required to have an action with :data and :patch properties, and an expected output (a Turtle file)." .

:NegativeEvaluationTest rdf:type rdfs:Class ;
      rdfs:label "Negative Evaluation Test" ;
      rdfs:comment "A type of test specifically for patch evaluation testing. Negative evaluation tests are not required to have any associated result, only an action with :data and :patch properties. Negative evaluation tests are tests of which the result should be an execution error" .


:data rdf:type rdf:Property ;
    rdfs:comment "Data file on which to perform action" ;
    # rdfs:domain  ?? ; ## object of the mf:action property
    # rdfs:range   ?? ; ## TTL file
    .	

:patch rdf:type rdf:Property ;
    rdfs:comment "LD-Patch file with which to perform action" ;
    # rdfs:domain  ?? ; ## object of the mf:action property
    # rdfs:range   ?? ; ## LD-Patch file
    .	

:base rdf:type rdf:Property ;
    rdfs:comment "Base IRI for data and patch, if different from actual location" ;
    # rdfs:domain  ?? ; ## object of the mf:action property
    # rdfs:range   ?? ; ## IRI
    .	

:statusCode rdf:type rdf:Property ;
    rdfs:comment "HTTP status code expected for a negative evaluation test" ;
    rdfs:domain :NegativeEvaluationTest ;
    rdfs:range xsd:integer ;
    .	

