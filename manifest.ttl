@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mf: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix : <#> .

<>  rdf:type mf:Manifest ;
    rdfs:comment "LD-Patch tests" ;
    mf:include ( <turtle/manifest.ttl> ) ;
    mf:entries
    (
        # positive syntax tests
        <#empty>
        <#var-subject>
        <#var-object>
        <#var-mixed-prefix>
        <#var-unicode>
        <#var-unicode>
        <#path-forward>
        <#path-backward>
        <#path-at>
        <#path-unicity>
        <#path-filter>
        <#path-filter-equal>
        <#path-mixed>
        <#prefix-simple>
        <#prefix-empty>
        <#bind-abbr-empty>
        <#add-empty>
        <#add-abbr-empty>
        <#delete-empty>
        <#delete-abbr-empty>
        ## TODO more...

        # negative syntax tests
        <#incomplete_prefix>
        <#var-predicate>
        ## TODO more...

        # positive evaluation tests
        ## TODO atomic tests...
        <#spec_example1>

        # negative evaluation tests
        <#ambiguous_path>
        ## TODO more examples?
    ) ;
    .


<#empty> rdf:type :PositiveSyntaxTest ;
   mf:name      "empty" ;
   rdfs:comment "An empty patch is valid" ;
   mf:action <empty.ldpatch> ;
   .

<#var-subject> rdf:type :PositiveSyntaxTest ;
   mf:name      "var-subject" ;
   rdfs:comment "A variable in subject position" ;
   mf:action <var-subject.ldpatch> ;
   .

<#var-object> rdf:type :PositiveSyntaxTest ;
   mf:name      "var-object" ;
   rdfs:comment "A variable in object position" ;
   mf:action <var-object.ldpatch> ;
   .

<#var-mixed-prefix> rdf:type :PositiveSyntaxTest ;
   mf:name      "var-mixed-prefix" ;
   rdfs:comment "Mixing prefix (? or $) for variables" ;
   mf:action <var-mixed-prefix.ldpatch> ;
   .

<#var-unicode> rdf:type :PositiveSyntaxTest ;
   mf:name      "var-unicode" ;
   rdfs:comment "Variable name using a lot of unicode characters" ;
   mf:action <var-unicode.ldpatch> ;
   .

<#path-forward> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-forward" ;
   rdfs:comment "Path containing a StepForward" ;
   mf:action <path-forward.ldpatch> ;
   .

<#path-backward> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-backward" ;
   rdfs:comment "Path containing a StepBackward" ;
   mf:action <path-backward.ldpatch> ;
   .

<#path-at> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-at" ;
   rdfs:comment "Path containing a StepAt" ;
   mf:action <path-at.ldpatch> ;
   .

<#path-unicity> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-unicity" ;
   rdfs:comment "Path containing a unicity constraint" ;
   mf:action <path-unicity.ldpatch> ;
   .

<#path-filter> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-filter" ;
   rdfs:comment "Path containing a filter" ;
   mf:action <path-filter.ldpatch> ;
   .

<#path-filter-equal> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-filter-equal" ;
   rdfs:comment "Path containing a filter with an equal sign" ;
   mf:action <path-filter-equal.ldpatch> ;
   .

<#path-mixed> rdf:type :PositiveSyntaxTest ;
   mf:name      "path-mixed" ;
   rdfs:comment "Complex path expression mixing many elements" ;
   mf:action <path-mixed.ldpatch> ;
   .

<#prefix-simple> rdf:type :PositiveSyntaxTest ;
   mf:name      "prefix-simple" ;
   rdfs:comment "Simple prefix declaration" ;
   mf:action <prefix-simple.ldpatch> ;
   .

<#prefix-empty> rdf:type :PositiveSyntaxTest ;
   mf:name      "Empty prefix declaration" ;
   rdfs:comment "prefix-empty" ;
   mf:action <prefix-empty.ldpatch> ;
   .

<#bind-abbr> rdf:type :PositiveSyntaxTest ;
   mf:name      "bind-abbr" ;
   rdfs:comment "Abbreviated Bind statement" ;
   mf:action <bind-abbr.ldpatch> ;
   .

<#add-empty> rdf:type :PositiveSyntaxTest ;
   mf:name      "add-empty" ;
   rdfs:comment "Add statement with an empty graph" ;
   mf:action <add-empty.ldpatch> ;
   .

<#add-abbr-empty> rdf:type :PositiveSyntaxTest ;
   mf:name      "add-abbr-empty" ;
   rdfs:comment "Abbreviated Add statement with an empty graph" ;
   mf:action <add-abbr-empty.ldpatch> ;
   .

<#delete-empty> rdf:type :PositiveSyntaxTest ;
   mf:name      "delete-empty" ;
   rdfs:comment "Delete statement with an empty graph" ;
   mf:action <delete-empty.ldpatch> ;
   .

<#delete-abbr-empty> rdf:type :PositiveSyntaxTest ;
   mf:name      "delete-empty" ;
   rdfs:comment "Abbreviated Delete statement with an empty graph" ;
   mf:action <delete-empty.ldpatch> ;
   .


<#incomplete_prefix> rdf:type :NegativeSyntaxTest ;
   mf:name      "incomplete_prefix" ;
   rdfs:comment "Incomplete prefix declaration" ;
   mf:action <incomplete_prefix.bad.ldpatch> ;
   .

<#var-predicate> rdf:type :NegativeSyntaxTest ;
   mf:name      "var-predicate" ;
   rdfs:comment "A variable in predicate position" ;
   mf:action <var-predicate.ldpatch> ;
   .

<#spec_example1> rdf:type :PositiveEvaluationTest ;
   mf:name      "spec_example1" ;
   rdfs:comment "Example #1 from the LD-Patch specification" ;
   mf:action    [
        :data  <spec_example1.ttl> ;
        :patch <spec_example2.ldpatch> ;
        :base  <http://example.com/timbl> ;
        ] ;
   mf:result    <spec_example3.ttl> ;
   .

<#ambiguous_path> rdf:type :NegativeEvaluationTest ;
   mf:name      "ambiguous_path" ;
   rdfs:comment "Ambigious path applied to Example #1 from the LD-Patch specification" ;
   mf:action    [
        :data  <spec_example1.ttl> ;
        :patch <ambiguous_path.ldpatch> ;
        ] ;
   .



#### Specific test vocabulary ####

:PositiveSyntaxTest rdf:type rdfs:Class ;
      rdfs:label "Positive Syntax Test" ;
      rdfs:comment "A type of test specifically for syntax testing. Syntax tests are not required to have an associated result, only an action (an LD-Patch file)." .

:NegativeSyntaxTest rdf:type rdfs:Class ;
      rdfs:label "Negative Syntax Test" ;
      rdfs:comment "A type of test specifically for syntax testing. Syntax tests are not required to have an associated result, only an action (an LD-Patch file). Negative syntax tests are tests of which the result should be a parser error." .

:PositiveEvaluationTest rdf:type rdfs:Class ;
      rdfs:label "Positive Evaluation Test" ;
      rdfs:comment "A type of test specifically for patch evaluation testing. Positive evaluation tests are required to have an action with :data and :patch properties, and an expected output (a Turtle file)." .

:NegativeEvaluationTest rdf:type rdfs:Class ;
      rdfs:label "Negative Evaluation Test" ;
      rdfs:comment "A type of test specifically for patch evaluation testing. Negative evaluation tests are not required to have any associated result, only an action with :data and :patch properties. Negative evaluation tests are tests of which the result should be an execution error" .


:data rdf:type rdf:Property ;
    rdfs:comment "Data file on which to perform action" ;
    # rdfs:domain  ?? ; ## object of the mf:action property
    # rdfs:range   ?? ; ## TTL file
    .	

:patch rdf:type rdf:Property ;
    rdfs:comment "LD-Patch file with which to perform action" ;
    # rdfs:domain  ?? ; ## object of the mf:action property
    # rdfs:range   ?? ; ## LD-Patch file
    .	

:base rdf:type rdf:Property ;
    rdfs:comment "Base IRI for data and patch, if different from actual location" ;
    # rdfs:domain  ?? ; ## object of the mf:action property
    # rdfs:range   ?? ; ## IRI
    .	
